#MIN_CONFIG(3.2.0)



AM_INIT_AUTOMAKE(kslovar, 0.3.0)
AC_C_BIGENDIAN
AC_CHECK_KDEMAXPATHLEN

KDE_FIND_PATH(xml2-config, XML_CONFIG, [${exec_prefix}/bin ${prefix}/bin], [
  AC_MSG_WARN([libxml2 not found anywhere, check ftp://xmlsoft.org/ for libxml >= 2.4.8. ])
])

if test -n "$XML_CONFIG"; then
  vers=`$XML_CONFIG --version 2>/dev/null | sed -e 's/libxml //' | awk 'BEGIN { FS = "."; } { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
  if test -n "$vers" && test "$vers" -ge 2004008
  then
     LIBXML_LIBS="`$XML_CONFIG --libs`"
     LIBXML_RPATH=
     for args in $LIBXML_LIBS; do
    case $args in
      -L*)
         LIBXML_RPATH="$LIBXML_RPATH $args"
         ;;
          esac
     done
     LIBXML_RPATH=`echo $LIBXML_RPATH | sed -e "s/-L/-R/g"`
     LIBXML_CFLAGS="`$XML_CONFIG --cflags`"

     KDE_FIND_PATH(xmllint, XMLLINT, [${prefix}/bin ${exec_prefix}/bin /usr/local/bin /opt/local/bin /usr/bin], [XMLLINT=""])
     AC_DEFINE_UNQUOTED(XMLLINT, "$XMLLINT", [Defines the executable of xmllint])
  else
     AC_MSG_WARN([You need at least libxml 2.4.8])
     DO_NOT_COMPILE="$DO_NOT_COMPILE src"
  fi
fi


  KDE_FIND_PATH(xslt-config, XSLT_CONFIG, [${prefix}/bin ${exec_prefix}/bin /usr/local/bin /opt/local/bin /usr/bin], [
    AC_MSG_WARN([Could not find libxslt anywhere, check ftp://xmlsoft.org/ for libxslt >= 1.0.7.])
  ])

  if test -n "$XSLT_CONFIG"; then
     vers=`$XSLT_CONFIG --version 2>/dev/null | awk 'BEGIN { FS = "."; } { printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
     if test -n "$vers" && test "$vers" -ge 1000007; then
       LIBXSLT_LIBS="`$XSLT_CONFIG --libs`"
       LIBXSLT_RPATH=
       for args in $LIBXSLT_LIBS; do
    case $args in
      -L*)
           LIBXSLT_RPATH="$LIBXSLT_RPATH $args"
         ;;
          esac
       done
       LIBXSLT_RPATH=`echo $LIBXSLT_RPATH | sed -e "s/-L/-R/g"`
       LIBXSLT_CFLAGS="`$XSLT_CONFIG --cflags`"
     AC_DEFINE(HAVE_XSLT, 1, [Define if you have xslt libraries and header files])
     else
       AC_WARN([You need at least libxslt 1.0.7])
     fi
  fi

if test ! "$USE_RPATH" = "yes"; then
  LIBXSLT_RPATH=
  LIBXML_RPATH=
fi

if test -z "$XML_CONFIG"; then
  DO_NOT_COMPILE="$DO_NOT_COMPILE src"
fi

if test -z "$XSLT_CONFIG"; then
  DO_NOT_COMPILE="$DO_NOT_COMPILE src"
fi
AC_SUBST(LIBXSLT_LIBS)
AC_SUBST(LIBXSLT_CFLAGS)
AC_SUBST(LIBXSLT_RPATH)

AC_SUBST(LIBXML_LIBS)
AC_SUBST(LIBXML_CFLAGS)
AC_SUBST(LIBXML_RPATH)

# -- Determine pointer size for sqlite -------------------------

KDE_FIND_PATH(sqlite3, SQLITE3_BIN, [${exec_prefix}/bin ${prefix}/bin], [
AC_MSG_WARN([sqlite3 not found. It will be build with KSlovar])
])
if test -n "$SQLITE3_BIN"; then
  AC_DEFINE(BUILD_SQLITE3, 0, [Use the system's SQLite])
  #AC_MSG([Using system's SQLite.])
  SQLITE3_LIB="-lsqlite3"
  DO_NOT_COMPILE="$DO_NOT_COMPILE src/sqlite"
  compile_sqlite=true
else
  AC_DEFINE(BUILD_SQLITE3, 1, [Build the included SQLite])
  #AC_MSG([Building the included SQLite])
  SQLITE3_LIB="$(top_builddir)/src/sqlite/libsqlite.la"
  compile_sqlite=false
fi

AM_CONDITIONAL(DO_NOT_COMPILE_SQLITE, test x$compile_sqlite = xtrue)
AC_SUBST(SQLITE3_LIB)


KDE_CHECK_TYPES
AC_DEFINE(SQLITE_PTR_SZ, SIZEOF_CHAR_P, [Determine pointer size for SQLite])
# -- End sqlite ------------------------------------------------
